import gulp from 'gulp';
import rename from 'gulp-rename';
import template from 'gulp-swig';
import iconfont from 'gulp-iconfont';

const runTimestamp = Math.round(Date.now() / 1000);
export const config = {
  name: 'FontIcons',
  icon: {
    src: './assets/icons/*.svg',
    dest: './assets/fonts',
    className: 'icon',
  },
  js: {
    template: './node_modules/gulp-font-icons/build/npm/lib/icon.js.template',
    dest: './src/browser/components',
    outputName: 'Icon.react.js',
  },
  sass: {
    template: './node_modules/gulp-font-icons/build/npm/lib/icon.sass.template',
    dest: './assets/css',
    outputName: '_font_icons.sass',
  },
  css: {
    template: './node_modules/gulp-font-icons/build/npm/lib/font.css.template',
    dest: './assets/css',
    outputName: 'iconfont.css',
  },
  fontPath: '/assets/fonts',
  comment: 'DO NOT EDIT DIRECTLY! Generated by the `gulp font-icons` task',
  showLog: true,
  options: {
    appendUnicode: true,
    fontName: 'font-icons',
    formats: ['woff', 'woff2', 'ttf'],
    normalize: true,
    timestamp: runTimestamp,
  },
};

function toCamelCase(string) {
  return string.replace(/-([a-z])/gi, (s, group1) => group1.toUpperCase());
}

export function generateIcon(types = 'css', glyphs = '') {
  const typesArray = types.split(' ');
  const templateConfig = {
    data: {
      className: config.icon.className,
      comment: config.comment,
      fontName: config.options.fontName,
      fontPath: config.fontPath,
      fontFormats: config.options.formats,
    },
  };

  if (glyphs) {
    templateConfig.data.icons = glyphs.map(icon => {
      const name = toCamelCase(icon.name);
      const code = icon.unicode[0].charCodeAt(0).toString(16);

      if (config.showLog) {
        console.log(type[0] == 'js' ? `<Icon kind='${name}' />` : `.icon-${name}`); // eslint-disable-line
      }

      return {name, code};
    });
  }

  typesArray.map(singleType => {
    const typeConfig = config[singleType.toLowerCase()];

    return gulp.src(typeConfig.template)
      .pipe(template(templateConfig))
      .pipe(rename(typeConfig.outputName))
      .pipe(gulp.dest(typeConfig.dest));
  });
}

export function fontIcons() {
  return gulp.src(config.icon.src)
    .pipe(iconfont(config.options)
      .on('glyphs', function(glyphs) {
        generateIcon('css sass js', glyphs);
      }))
    .pipe(gulp.dest(config.icon.dest));
}
