import gulp from 'gulp';
import rename from 'gulp-rename';
import template from 'gulp-swig';
import iconfont from 'gulp-iconfont';

const runTimestamp = Math.round(Date.now() / 1000);
export const config = {
  name: 'FontIcons',
  iconSrc: './assets/icons/*.svg',
  iconDest: './assets/fonts',
  jsTemplate: './node_modules/gulp-font-icons/build/npm/lib/icon.js.template',
  jsDest: './src/browser/components',
  jsOutputName: 'Icon.react.js',
  sassTemplate: './node_modules/gulp-font-icons/build/npm/lib/icon.sass.template',
  sassDest: './assets/css',
  sassOutputName: '_font_icons.sass',
  cssTemplate: './node_modules/gulp-font-icons/build/npm/lib/font.css.template',
  cssDest: './assets/css',
  cssOutputName: 'iconfont.css',
  fontPath: '/assets/fonts',
  className: 'icon',
  comment: 'DO NOT EDIT DIRECTLY! Generated by the `gulp font-icons` task',
  options: {
    appendUnicode: true,
    fontName: 'font-icons',
    formats: ['woff', 'woff2', 'ttf'],
    normalize: true,
    timestamp: runTimestamp,
  },
};

function toCamelCase(string) {
  return string.replace(/-([a-z])/gi, (s, group1) => group1.toUpperCase());
}

export function generateFontCss() {
  const fontCss = template({
    data: {
      fontName: config.options.fontName,
      fontPath: config.fontPath,
      comment: config.comment,
    },
  });

  return gulp.src(config.cssTemplate)
    .pipe(fontCss)
    .pipe(rename(config.cssOutputName))
    .pipe(gulp.dest(config.cssDest));
}

export function generateIconSass(glyphs) {
  const iconSass = template({
    data: {
      icons: glyphs.map(icon => {
        const name = icon.name;
        const code = icon.unicode[0].charCodeAt(0).toString(16).toUpperCase();
        console.log(`.icon-${name}`); // eslint-disable-line
        return {name: name, code: code};
      }),
      className: config.className,
      comment: config.comment,
    },
  });

  return gulp.src(config.sassTemplate)
    .pipe(iconSass)
    .pipe(rename(config.sassOutputName))
    .pipe(gulp.dest(config.sassDest));
}

export function generateIconJs(glyphs) {
  const iconJs = template({
    data: {
      icons: glyphs.map(icon => {
        const name = toCamelCase(icon.name);
        const code = icon.unicode[0].charCodeAt(0);
        console.log(`<Icon kind='${name}' />`); // eslint-disable-line
        return {name: name, code: code};
      }),
      fontName: config.options.fontName,
      comment: config.comment,
    },
  });

  return gulp.src(config.jsTemplate)
    .pipe(iconJs)
    .pipe(rename(config.jsOutputName))
    .pipe(gulp.dest(config.jsDest));
}

export function fontIcons() {
  return gulp.src(config.iconSrc)
  .pipe(iconfont(config.options)
  .on('glyphs', function(glyphs) {
    generateFontCss();
    generateIconSass(glyphs);
    generateIconJs(glyphs);
  }))
  .pipe(gulp.dest(config.iconDest));
}
